# -*- coding: utf-8 -*-
"""chatbot_openai_token_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kRuF2RiiZzO2c44KbJ3ywPwODVcjGPR4
"""

# Install required package
# !pip install openai tiktoken

import os
import openai
import pprint
import tiktoken

# Set your OpenAI API key
os.environ['OPENAI_API_KEY'] = 'your-api-key-here'  # Replace with your actual API key
openai.api_key = os.getenv('OPENAI_API_KEY')

# Simple example of chat completion
response = openai.chat.completions.create(
    model='gpt-3.5-turbo',
    messages=[
        {'role': 'system', 'content': 'You are a Jordanian history Tutor'},
        {'role': 'user', 'content': 'Who was the first king of Jordan?'}
    ]
)

# Print response content
pprint.pprint(response.choices[0].message.content)

# Another example with context
response = openai.chat.completions.create(
    model='gpt-3.5-turbo',
    messages=[
        {'role': 'system', 'content': 'You are a Jordanian history Tutor'},
        {'role': 'user', 'content': 'Question: Who was the first king of Jordan?'},
        {'role': 'assistant', 'content': 'Answer: The first king of Jordan was King Abdullah I'},
        {'role': 'user', 'content': 'Question: What year was he born?'}
    ]
)

pprint.pprint(response.choices[0].message.content)

# Define a chatbot class that keeps context
class CreateBot:
    def __init__(self, system_prompt):
        self.system = system_prompt
        self.messages = [{'role': 'system', 'content': system_prompt}]

    def chat(self):
        print('To terminate conversation, type "END"')
        question = ""
        while question != "END":
            question = input("")
            print('\n')
            self.messages.append({'role': 'user', 'content': question})
            response = openai.chat.completions.create(
                model='gpt-3.5-turbo',
                max_tokens=1000,
                temperature=0.3,
                messages=self.messages
            )
            content = response.choices[0].message.content
            print('\n')
            pprint.pprint(content)
            print('\n')
            self.messages.append({'role': 'assistant', 'content': content})

# Create an instance of the bot and start chat
history_tutor = CreateBot(system_prompt='You are a Jordanian History Tutor')
# history_tutor.chat()  # Uncomment this line to run the chat interactively

# Combine all messages into one string
full_text = ''
for item in history_tutor.messages:
    full_text += item['content']

# Count number of words in the full conversation
word_count = len(full_text.split())
print(f"Word count: {word_count}")

# Function to count tokens using tiktoken
def num_tokens_from_string(string: str, encoding_name: str) -> int:
    """Returns the number of tokens in a text string."""
    encoding = tiktoken.get_encoding(encoding_name)
    num_tokens = len(encoding.encode(string))
    return num_tokens

# Count tokens in the conversation
token_count = num_tokens_from_string(full_text, 'cl100k_base')
print(f"Token count: {token_count}")